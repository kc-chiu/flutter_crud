import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_core/firebase_core.dart';

import 'models.dart';

class FirebaseTodosRepository implements TodosRepository {
  FirebaseTodosRepository() {
    futureFirebaseApp = init();
  }

  late Future<FirebaseApp> futureFirebaseApp;

  Future<FirebaseApp> init() async {
    return await Firebase.initializeApp();
  }

  final collectionPath = 'todos';

  @override
  Future<List<Todo>> readAllTodos(int userId) async {
    // Ensures initialized.
    await futureFirebaseApp;

    final todos = <Todo>[];
    try {
      final querySnapshot = await FirebaseFirestore.instance
          .collection(collectionPath)
          .where('userId', isEqualTo: userId)
          .get();
      for (final documentQuerySnapshot in querySnapshot.docs) {
        final json = documentQuerySnapshot.data();
        json['id'] = documentQuerySnapshot.id;
        todos.add(Todo.fromJson(json));
      }
    } on Exception catch (e) {
      throw Exception('Failed to read data: $e');
    }
    return todos;
  }

  @override
  Future<Todo> create(Todo todo, int userId) async {
    // Ensures initialized.
    await futureFirebaseApp;

    // New [Todo.id] is generated by database.
    try {
      final documentReference =
          await FirebaseFirestore.instance.collection(collectionPath).add({
        'title': todo.title,
        'isCompleted': false,
        'userId': userId,
      });
      final documentSnapshot = await documentReference.get();
      todo.id = documentSnapshot.id;
    } on Exception catch (e) {
      throw Exception('Failed to create Todo: $e');
    }
    return todo;
  }

  @override
  Future<void> update(Todo todo) async {
    // Ensures initialized.
    await futureFirebaseApp;

    try {
      await FirebaseFirestore.instance
          .collection(collectionPath)
          .doc(todo.id)
          .update({
        'title': todo.title,
        'isCompleted': todo.isCompleted,
      });
    } on Exception catch (e) {
      throw Exception('Failed to update Todo: $e');
    }
  }

  @override
  Future<void> delete(Todo todo) async {
    // Ensures initialized.
    await futureFirebaseApp;

    try {
      await FirebaseFirestore.instance
          .collection(collectionPath)
          .doc(todo.id)
          .delete();
    } on Exception catch (e) {
      throw Exception('Failed to delete Todo: $e');
    }
  }
}
